machine:
  services:
    - docker
dependencies:
  pre:
    - sudo apt-add-repository -y 'deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.4 main'
    - sudo apt-add-repository -y ppa:ubuntu-toolchain-r/test
    - sudo add-apt-repository -y ppa:afrank/boost
    - wget -q -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -
    - sudo apt-get update -qq
    - sudo apt-get purge -qq libboost1.48-dev
    - sudo apt-get install -qq libboost1.57-all-dev
    - sudo apt-get install -qq clang-3.4 gcc-4.8 libobjc-4.8-dev libgcc-4.8-dev libstdc++-4.8-dev libclang1-3.4 libgcc1 libgomp1 libstdc++6 scons protobuf-compiler libprotobuf-dev libssl-dev exuberant-ctags
    - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 99 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8
    - sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-3.4 99 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-3.4
    - gcc --version
    - clang --version
test:
  pre:
    - scons clang.debug
  override:
    - | # create gdb script
      echo "set env MALLOC_CHECK_=3" > script.gdb 
      echo "run" >> script.gdb
      echo "backtrace full" >> script.gdb 
      # gdb --help
    - cat script.gdb | gdb --ex 'set print thread-events off' --return-child-result --args build/clang.debug/divvyd --unittest
    - npm install
    # Use build/(gcc|clang).debug/divvyd
    - |
      echo "exports.default_server_config = {\"divvyd_path\" : \"$HOME/divvyd/build/clang.debug/divvyd\"};" > test/config.js

    # Run integration tests
    - npm test
  post:
    - mkdir -p build/docker/
    - cp doc/divvyd-example.cfg build/clang.debug/divvyd build/docker/
    - cp Builds/Docker/Dockerfile-testnet build/docker/Dockerfile
    - mv build/docker/divvyd-example.cfg build/docker/divvyd.cfg
    - strip build/docker/divvyd
    - docker build -t ripple/divvyd:$CIRCLE_SHA1 build/docker/
    - docker tag ripple/divvyd:$CIRCLE_SHA1 ripple/divvyd:latest
    - docker tag ripple/divvyd:$CIRCLE_SHA1 ripple/divvyd:$CIRCLE_BRANCH
    - docker images
deployment:
  docker:
    branch: /.*/
    commands:
      - docker login -e $DOCKER_EMAIL -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - docker push ripple/divvyd:$CIRCLE_SHA1
      - docker push ripple/divvyd:$CIRCLE_BRANCH
      - docker push ripple/divvyd:latest
